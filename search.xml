<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mysql进阶篇 一</title>
    <url>/2023/07/05/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h2 id="1-索引"><a href="#1-索引" class="headerlink" title="1.索引"></a>1.索引</h2><h3 id="1-基础语法"><a href="#1-基础语法" class="headerlink" title="1.基础语法"></a>1.基础语法</h3><p>索引是一种数据结构，用于加快数据的检索速度。常见的索引类型包括B树索引和哈希索引。在创建表时，可以为某些列添加索引来提高查询效率。</p>
<p>要为MySQL表添加索引，可以使用以下语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> INDEX index_name (column1, column2, ...);</span><br></pre></td></tr></table></figure>

<p>例如，如果要为名为<code>users</code>的表的<code>username</code>列添加一个名为<code>idx_username</code>的索引，可以使用以下语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users <span class="keyword">ADD</span> INDEX idx_username (username);</span><br></pre></td></tr></table></figure>

<p>还可以为多个列同时添加索引，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users <span class="keyword">ADD</span> INDEX idx_username_email (username, email);</span><br></pre></td></tr></table></figure>

<p>此外，还可以使用<code>UNIQUE</code>关键字来创建唯一索引，确保索引列的值唯一：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX idx_username (username);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，添加索引会增加写操作的开销，因为每次更新索引列时，还需要更新索引。因此，应该谨慎选择需要添加索引的列，避免过多的索引影响性能。</p>
<p>另外，还可以使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure>

<p>语句来查看表的索引信息，以及使用</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name</span><br></pre></td></tr></table></figure>

<p>语句来删除索引。</p>
<h3 id="2-影响与使用"><a href="#2-影响与使用" class="headerlink" title="2.影响与使用"></a>2.影响与使用</h3><p>查询语句正常使用就行</p>
<ul>
<li>WHERE子句：在查询语句的WHERE子句中使用索引列，可以帮助MySQL快速定位符合条件的数据。例如，如果有一个名为<code>idx_username</code>的索引，可以使用以下查询：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;john&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>ORDER BY子句：当使用ORDER BY子句对查询结果进行排序时，如果排序的列上有索引，MySQL可以使用索引来加速排序过程。例如，如果有一个名为<code>idx_created_at</code>的索引，可以使用以下查询：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at;</span><br></pre></td></tr></table></figure>

<ul>
<li>JOIN操作：当进行JOIN操作时，可以使用索引来加速关联表的过程。确保参与JOIN操作的列上有索引，可以提高查询性能。例如，如果有一个名为<code>idx_user_id</code>的索引，可以使用以下查询：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>避免索引失效：有些情况下，即使有索引，MySQL也可能选择不使用索引，导致查询性能下降。一些常见的情况包括使用函数或表达式对索引列进行操作，使用OR运算符连接多个条件等。尽量避免这些情况，以确保索引能够发挥作用。</p>
</li>
<li><p>EXPLAIN语句：使用<code>EXPLAIN</code>语句可以分析查询语句的执行计划，包括是否使用了索引。通过查看执行计划，可以判断是否需要优化查询语句或添加索引。</p>
</li>
<li><p>索引选择：在设计表结构时，根据查询的需求和频率选择合适的索引。选择具有较高选择性的列作为索引列，避免过多的索引影响写操作性能。</p>
</li>
</ul>
<p>需要注意的是，虽然索引可以提高查询性能，但过多的索引也会增加写操作的开销，并占用额外的存储空间。因此，需要权衡索引的使用和性能的平衡。</p>
<h2 id="2-事务"><a href="#2-事务" class="headerlink" title="2.事务"></a>2.事务</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>事务是一组数据库操作的集合，这些操作要么全部成功执行，要么全部回滚。事务具有以下四个特性（通常称为ACID特性）：</p>
<ol>
<li><u>原子性（Atomicity）：事务中的所有操作要么全部成功执行，要么全部失败回滚。如果事务中的任何一条操作失败，那么整个事务都会被回滚到之前的状态，不会对数据库造成影响。</u></li>
<li>一致性（Consistency）：事务执行前和执行后，数据库的状态都必须保持一致。事务中的操作不会破坏数据库的完整性约束，如主键、外键、唯一性约束等。</li>
<li><u>隔离性（Isolation）：每个事务的操作都应该与其他事务的操作相互隔离，互不干扰。一个事务的中间结果对其他事务是不可见的，直到事务提交才能对其他事务可见。</u></li>
<li>持久性（Durability）：一旦事务提交，其对数据库的修改应该是永久性的，即使发生系统故障或重启，修改的结果也应该得以保留。</li>
</ol>
<p>注：<u>同一会话只能存在一个事务</u></p>
<h3 id="2-原子性的意义"><a href="#2-原子性的意义" class="headerlink" title="2.原子性的意义"></a>2.原子性的意义</h3><p>原子性在许多应用场景中都是非常重要的，以下是一些经典案例，展示了需要原子性的情况：</p>
<ol>
<li>转账操作：在银行系统或支付系统中，转账操作是一个典型的需要原子性保证的场景。转账涉及从一个账户扣除一定金额并将其添加到另一个账户，必须保证这两个操作要么同时成功，要么同时失败，<u>以避免出现一方扣款而另一方未收到款项的情况</u>。</li>
<li>订单处理：在电子商务系统中，订单处理通常涉及多个步骤，如扣减库存、生成发货单、更新订单状态等。这些操作必须作为一个原子性的事务进行，以确保订单处理的一致性和完整性。</li>
<li>数据库更新：在数据库中进行复杂的数据更新操作时，如批量插入、批量修改或批量删除，需要保证这些操作要么全部成功，要么全部回滚，<u>以避免部分数据更新成功而部分数据更新失败的情况</u>。</li>
</ol>
<h3 id="3-事务的隔离性"><a href="#3-事务的隔离性" class="headerlink" title="3.事务的隔离性"></a>3.事务的隔离性</h3><p>首先需要了解几个可能出现的情况</p>
<h4 id="1-脏读（Dirty-Read）"><a href="#1-脏读（Dirty-Read）" class="headerlink" title="1.脏读（Dirty Read）"></a>1.脏读（Dirty Read）</h4><p>指一个事务读取了另一个未提交事务的数据。<u>当一个事务对数据进行修改但尚未提交时，另一个事务读取了这些未提交的数据，导致读取到了不一致或无效的数据。</u></p>
<p>脏读可能会导致数据的不一致性和错误的结果。当未提交的事务回滚时，读取到的数据实际上是不存在的，这可能会引发误解和错误的判断。</p>
<h4 id="2-幻读（Phantom-Read）"><a href="#2-幻读（Phantom-Read）" class="headerlink" title="2.幻读（Phantom Read）"></a>2.幻读（Phantom Read）</h4><p>指在一个事务中，当多次执行同一个查询时，可能会看到不一致的行数或数据集合的情况。</p>
<p>当一个事务在读取某个范围的数据时，另一个事务在该范围内插入了新的行或删除了现有的行。由于范围内的数据发生了变化，第一个事务再次执行同一个查询时，会看到不一致的行数或数据集合，就好像出现了幻觉一样，这就是幻读。</p>
<h4 id="3-不可重复读（Non-Repeatable-Read）"><a href="#3-不可重复读（Non-Repeatable-Read）" class="headerlink" title="3.不可重复读（Non-Repeatable Read）"></a>3.不可重复读（Non-Repeatable Read）</h4><p>指在一个事务中，多次执行同一个查询，可能会看到不同的数据值。</p>
<p>当一个事务在读取某个数据后，另一个事务对该数据进行了修改并提交后，第一个事务再次读取同一个数据时，可能会看到不同的数据值。</p>
<h4 id="4-三者区别"><a href="#4-三者区别" class="headerlink" title="4.三者区别"></a>4.三者区别</h4><table>
<thead>
<tr>
<th align="left">情况</th>
<th align="left">产生时机</th>
<th align="left">影响</th>
</tr>
</thead>
<tbody><tr>
<td align="left">脏读</td>
<td align="left">一个事务读取了另一个未提交事务的数据时</td>
<td align="left">可能会读取到不一致或无效的数据值</td>
</tr>
<tr>
<td align="left">幻读</td>
<td align="left">一个事务读取某个数据范围时，另一个事务在该范围内插入了新的行或删除了现有的行</td>
<td align="left">可能会读取到不一致的行数或数据集合</td>
</tr>
<tr>
<td align="left">不可重复读</td>
<td align="left">一个事务在读取某个数据后，另一个事务对该数据进行了修改并提交后，第一个事务再次读取同一个数据时</td>
<td align="left">可能会读取到不一致数据值。</td>
</tr>
</tbody></table>
<h4 id="5-事务的隔离级别"><a href="#5-事务的隔离级别" class="headerlink" title="5.事务的隔离级别"></a>5.事务的隔离级别</h4><p>事务隔离级别（Transaction Isolation Level）是指在并发情况下，一个事务对于其他事务的可见性和影响范围的控制程度。MySQL支持多个事务隔离级别，每个级别都有不同的特性和权衡。</p>
<p>以下是四个常见的事务隔离级别：</p>
<ol>
<li>Read Uncommitted（读未提交）：最低的隔离级别，事务可以读取其他事务未提交的数据。这种级别存在脏读的问题，可能导致不一致的数据。</li>
<li>Read Committed（读已提交）：保证一个事务只能读取其他事务已提交的数据。这种级别避免了脏读的问题，但仍然可能出现不可重复读和幻读的问题。</li>
<li>Repeatable Read（可重复读）：事务之间可以并发执行，但通过使用多版本并发控制（MVCC）来保证数据的一致性。每个事务在读取数据时会创建一个快照，并在事务执行期间保持一致。这种级别避免了脏读和不可重复读的问题，一定程度上解决了幻读问题，但并不完全。</li>
<li>Serializable（串行化）：最高的隔离级别，通过对事务进行串行化执行来避免并发问题。后一个事务必须等待前一个事务执行完成，事务之间完全隔离，避免了脏读、不可重复读和幻读的问题。但由于串行化执行，可能导致性能下降。</li>
</ol>
<p>不同的隔离级别在提供数据一致性和并发性之间存在权衡。更高的隔离级别通常提供更好的数据一致性，但可能降低并发性能。选择适当的隔离级别应根据具体的业务需求和性能要求进行评估。</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>解决问题</th>
<th>存在问题</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交</td>
<td>-</td>
<td>脏读</td>
</tr>
<tr>
<td>读已提交</td>
<td>脏读</td>
<td>不可重复读、幻读</td>
</tr>
<tr>
<td>可重复读</td>
<td>脏读、不可重复读</td>
<td>可能会幻读</td>
</tr>
<tr>
<td>串行化</td>
<td>脏读、不可重复读和幻读</td>
<td>并发性能差</td>
</tr>
</tbody></table>
<h3 id="4-语法"><a href="#4-语法" class="headerlink" title="4.语法"></a>4.语法</h3><p>在MySQL中，可以使用以下语句来定义和控制事务：</p>
<ol>
<li>开始事务：使用<code>START TRANSACTION</code>或<code>BEGIN</code>语句来开始一个事务。</li>
<li>提交事务：使用<code>COMMIT</code>语句来提交事务，将事务中的操作永久保存到数据库。</li>
<li>回滚事务：使用<code>ROLLBACK</code>语句来回滚事务，撤销事务中的操作，恢复到事务开始前的状态。</li>
<li>设置隔离级别：可以使用<code>SET TRANSACTION ISOLATION LEVEL</code>语句来设置事务的隔离级别。如<code>READ UNCOMMITTED</code>、<code>READ COMMITTED</code>、<code>REPEATABLE READ</code>和<code>SERIALIZABLE</code>。</li>
</ol>
<p>使用一个事务：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<p>回滚一个事务：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>

<p>设置全局隔离级别：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL isolation_level;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br></pre></td></tr></table></figure>

<p>设置会话隔离级别：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL isolation_level;</span><br></pre></td></tr></table></figure>

<p>查看事务的当前隔离级别：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@tx_isolation</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@session</span>.tx_isolation;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.tx_isolation;</span><br></pre></td></tr></table></figure>

<p>可以使用保存点（Savepoint）来模拟子事务的行为。保存点是在事务中设置的一个标记，可以在事务执行期间进行回滚到该标记的位置。通过使用保存点，可以在事务中创建多个逻辑上的子事务，并在需要时回滚到保存点。</p>
<ol>
<li>在事务开始时，使用<code>SAVEPOINT</code>语句创建一个保存点：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure>

<p>在事务执行期间，执行一系列SQL操作，这些操作可以被视为子事务的逻辑。</p>
<p>如果在子事务中发生错误或者需要回滚，可以回滚到保存点：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure>

<p>如果子事务执行成功，可以继续执行其他操作。</p>
<p>最终，通过使用<code>COMMIT</code>语句提交整个事务，或者使用<code>ROLLBACK</code>语句回滚整个事务。</p>
<p><u>虽然使用保存点可以模拟子事务的行为，但它并不是真正的子事务。在MySQL中，事务的提交或回滚是整体性的，无法对部分操作进行提交或回滚。</u></p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>新手github常用命令教程</title>
    <url>/2023/06/23/GitHub/%E6%96%B0%E6%89%8Bgithub%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="无仓库，新建一个仓库并上传代码"><a href="#无仓库，新建一个仓库并上传代码" class="headerlink" title="无仓库，新建一个仓库并上传代码"></a>无仓库，新建一个仓库并上传代码</h2><p>1.在 GitHub 上创建一个新的仓库。在 GitHub 网站上登录并点击右上角的加号图标，选择 “New repository” 创建一个新的仓库。给仓库起一个名称，并选择是否设为公开或私有。</p>
<p>2.在本地项目中初始化 Git 仓库。打开你的项目文件夹，在命令行中执行以下命令来初始化 Git 仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<p>3.将项目文件添加到 Git 仓库。使用以下命令将所有文件添加到 Git 仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure>

<p>4.如果你只想添加特定的文件，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add 文件名</span><br></pre></td></tr></table></figure>

<p>5.提交你的更改。使用以下命令提交你的更改，并添加一个提交消息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;提交消息&quot;</span></span><br></pre></td></tr></table></figure>

<p>6.将本地仓库与远程仓库关联。在 GitHub 上创建的仓库中，复制仓库的远程 URL。然后，在命令行中执行以下命令将本地仓库与远程仓库关联：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin 远程仓库URL</span><br></pre></td></tr></table></figure>

<p>7.将远程仓库URL替换为你复制的远程仓库 URL。</p>
<p>8.推送代码到远程仓库。使用以下命令将代码推送到远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<h2 id="已有仓库，拉取项目到本地"><a href="#已有仓库，拉取项目到本地" class="headerlink" title="已有仓库，拉取项目到本地"></a>已有仓库，拉取项目到本地</h2><p>1.在本地项目中，使用以下命令将远程仓库与本地仓库关联：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin 远程仓库URL</span><br></pre></td></tr></table></figure>

<p>2.将远程仓库URL替换为你的远程仓库的 URL。</p>
<p>3.使用以下命令将远程仓库的代码拉取到本地仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure>

<h2 id="更新已上传过的项目"><a href="#更新已上传过的项目" class="headerlink" title="更新已上传过的项目"></a>更新已上传过的项目</h2><p>1.确保项目路径自上次上传后没有变更，在项目路径中输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;提交消息&quot;</span></span><br></pre></td></tr></table></figure>

<p>2.使用以下命令将本地仓库的更改推送到远程仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<h1 id="7月6日更新"><a href="#7月6日更新" class="headerlink" title="7月6日更新"></a>7月6日更新</h1><h2 id="查看当前仓库"><a href="#查看当前仓库" class="headerlink" title="查看当前仓库"></a>查看当前仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>

<h2 id="更改仓库url"><a href="#更改仓库url" class="headerlink" title="更改仓库url"></a>更改仓库url</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote set-url origin &lt;new-url&gt;</span><br></pre></td></tr></table></figure>

<h2 id="列出本地仓库中的分支"><a href="#列出本地仓库中的分支" class="headerlink" title="列出本地仓库中的分支"></a>列出本地仓库中的分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch </span><br><span class="line"></span><br><span class="line">$ git branch -v  //可以查看提交信息</span><br></pre></td></tr></table></figure>

<h2 id="切换到不同的分支或恢复文件的状态"><a href="#切换到不同的分支或恢复文件的状态" class="headerlink" title="切换到不同的分支或恢复文件的状态"></a>切换到不同的分支或恢复文件的状态</h2><ol>
<li><p>切换到已存在的分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建并切换到新分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>恢复单个文件到最新提交状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;file-name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>恢复整个目录到最新提交状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;directory-name&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意：在切换分支或恢复文件时，确保没有未提交的更改，否则可能会导致更改的丢失。</p>
]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器事件循环</title>
    <url>/2023/07/02/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h2 id="事件循环的背景"><a href="#事件循环的背景" class="headerlink" title="事件循环的背景"></a>事件循环的背景</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>浏览器在运行中会开启很多进程，其中最主要的进程有：</p>
<ol>
<li>浏览器进程<br> 主要负责界面显示、用户交互、子进程管理等。浏览器进程内部又会启动多个线程处理不同的任务</li>
<li>网络进程<br> 负责加载网络资源。网络进程内容会启动多个线程来处理不同任务</li>
<li>渲染进程<br> 渲染进程启动后会开启一个<strong>渲染主线程</strong>，负责执行html、css、js代码。默认情况下，浏览器会为每一个标签页开启一个新的渲染进程，以保证不同的标签页之间互不影响</li>
</ol>
<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>JS 是单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个，且承担诸多工作，如渲染页面、执行JS等，因此如果使用同步的方式，就很容易导致主线程产生阻塞，从而导致消息队列中的其他任务无法执行</p>
<p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络事件监听，主线程将任务交给其他线程去处理，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行</p>
<p>在这中异步模式下，最大限度的保证了单线程的流程执行</p>
<p><u>因此单线程是异步产生的原因，事件循环是异步的实现方式</u></p>
<h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>事件循环也称消息循环，是浏览器渲染主线程的工作方式。</p>
<p>循环指的是在不同的消息队列中进行循环，每次循环从当前队列中取出第一个任务执行，其他线程只需要在合适的时候将任务加入到队列末尾即可</p>
<h3 id="队列优先级"><a href="#队列优先级" class="headerlink" title="队列优先级"></a>队列优先级</h3><ul>
<li>每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以处于不同的队列。不同的队列有不同的优先级，在一次事件循环中，有浏览器决定取哪一个队列的任务。</li>
<li>浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</li>
</ul>
<p>目前包含以下队列：</p>
<ul>
<li>微队列：用户存放需要最快执行的任务，优先级最高</li>
<li>交互队列：用于存放用户操作后产生的事件处理任务，优先级高</li>
<li>延时队列：用于存放计时器到达后的回调任务，优先级中</li>
</ul>
<p>添加到微队列的方式主要是Promise、MutationObserver和async&#x2F;await<br>例如：</p>
<figure class="highlight javascript"><figcaption><span>Promise</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Done&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>MutationObserver</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 MutationObserver 实例，并指定回调函数</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">mutationsList, observer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理 DOM 变化的逻辑</span></span><br><span class="line">  mutationsList.<span class="title function_">forEach</span>(<span class="function"><span class="params">mutation</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation.<span class="property">type</span>); <span class="comment">// 打印变化的类型</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(mutation.<span class="property">target</span>); <span class="comment">// 打印发生变化的节点</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 observe 方法指定要监听的 DOM 元素和变化类型</span></span><br><span class="line">observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止监听 DOM 变化</span></span><br><span class="line">observer.<span class="title function_">disconnect</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>async/await</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//当调用 fetchData 函数时，它会立即返回一个 Promise 对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//await 表达式会在执行时创建一个微任务，并将其添加到微任务队列中,同时暂停主线程的执行。</span></span><br><span class="line">  <span class="comment">//这样可以确保 await 后面的代码在前面的异步操作完成后才会执行。</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>); </span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> result.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Data:&#x27;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Before&#x27;</span>);</span><br><span class="line"><span class="title function_">fetchData</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;After&#x27;</span>);</span><br><span class="line"></span><br><span class="line">最后结果：</span><br><span class="line"><span class="title class_">Before</span></span><br><span class="line"><span class="title class_">After</span></span><br><span class="line"><span class="title class_">Start</span></span><br><span class="line"><span class="title class_">Data</span>: &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>wx.getUserProfile 不出现弹窗</title>
    <url>/2023/06/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx-getUserProfile-%E4%B8%8D%E5%87%BA%E7%8E%B0%E5%BC%B9%E7%AA%97/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用wx.getUserProfile 获取用户信息，但是不出现弹窗就直接获取到了用户信息，且返回灰色头像，和“微信用户”昵称</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>原来这个接口在22年5月的时候被回收了，低版本调试库才会正常显示，高版本则会返回灰色头像和默认的“微信用户”昵称<br>官方的解释是：实践中发现有部分小程序，在用户刚打开小程序时就要求收集用户的微信昵称头像，或者在支付前等不合理路径上要求授权。如果用户拒绝授权，则无法使用小程序或相关功能。在已经获取用户的 openId 与 unionId 信息情况下，用户的微信昵称与头像并不是用户使用小程序的必要条件。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>我的解决方法是手动加一个权限弹窗</p>
<img src="/images/%E6%89%8B%E5%8A%A8%E5%BC%B9%E7%AA%97.gif" class="center" width="200" title="权限弹窗">

<h3 id="授权弹窗"><a href="#授权弹窗" class="headerlink" title="授权弹窗"></a>授权弹窗</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">signupAndLogin</span>(<span class="params"></span>) &#123;            <span class="comment">//bindtap事件</span></span><br><span class="line">    wx.<span class="title function_">showModal</span>(&#123;                     <span class="comment">//手动授权弹窗</span></span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;授权登录提示&#x27;</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;是否允许授权？&#x27;</span>,</span><br><span class="line">      <span class="attr">showCancel</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">confirmText</span>: <span class="string">&#x27;允许&#x27;</span>,</span><br><span class="line">      <span class="attr">confirmColor</span>: <span class="string">&#x27;#669F76&#x27;</span>,</span><br><span class="line">      <span class="attr">cancelColor</span>: <span class="string">&#x27;#CC463D&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;     <span class="comment">//用户确认</span></span><br><span class="line">          <span class="keyword">const</span> &#123; <span class="attr">userInfo</span>: &#123; nickName, avatarUrl &#125; &#125; = <span class="keyword">await</span></span><br><span class="line">            wx.<span class="title function_">getUserProfile</span>(&#123;    <span class="comment">//获取用户信息，最新版本已不支持弹窗</span></span><br><span class="line">              <span class="attr">desc</span>: <span class="string">&#x27;用户授权&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line"> </span><br><span class="line">          <span class="keyword">let</span> &#123; result &#125; = <span class="keyword">await</span> wx.<span class="property">cloud</span>.<span class="title function_">callFunction</span>(&#123;  <span class="comment">// 调用云函数</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;loginOrSignup&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">              nickName,</span><br><span class="line">              avatarUrl</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">userInfo</span>: result &#125;)</span><br><span class="line">          <span class="title function_">getApp</span>().<span class="property">globalData</span>.<span class="property">userStatus</span> = <span class="literal">true</span>   <span class="comment">//用于检查用户是否登录的全局变量</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">cancel</span>) &#123;     <span class="comment">//用户取消</span></span><br><span class="line">          wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;取消授权&#x27;</span>,</span><br><span class="line">            <span class="attr">mask</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;error&#x27;</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="loginOrSignup云函数"><a href="#loginOrSignup云函数" class="headerlink" title="loginOrSignup云函数"></a>loginOrSignup云函数</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;) <span class="comment">// 使用当前云环境</span></span><br><span class="line"><span class="keyword">const</span> db = cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="variable constant_">OPENID</span> &#125; = cloud.<span class="title function_">getWXContext</span>()</span><br><span class="line">  <span class="keyword">const</span> &#123; nickName, avatarUrl &#125; = event</span><br><span class="line">  <span class="keyword">const</span> user_clct = db.<span class="title function_">collection</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> user_clct.<span class="title function_">where</span>(&#123;    <span class="comment">//查询用户是否存在</span></span><br><span class="line">    <span class="attr">_openId</span>: <span class="variable constant_">OPENID</span></span><br><span class="line">  &#125;).<span class="title function_">get</span>()</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (data.<span class="property">length</span> === <span class="number">0</span>) &#123;                     <span class="comment">//如果用户不存在，添加用户</span></span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> user_clct.<span class="title function_">add</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        nickName,</span><br><span class="line">        avatarUrl,</span><br><span class="line">        <span class="attr">_openId</span>: <span class="variable constant_">OPENID</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      nickName,</span><br><span class="line">      avatarUrl,</span><br><span class="line">      <span class="attr">_openId</span>: <span class="variable constant_">OPENID</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data[<span class="number">0</span>]       <span class="comment">//如果用户存在，返回该用户信息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择头像"><a href="#选择头像" class="headerlink" title="选择头像"></a>选择头像</h3><img src="/images/%E9%80%89%E6%8B%A9%E5%A4%B4%E5%83%8F.gif" class="center" width="200" title="权限弹窗">
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><figure class="highlight html"><figcaption><span>wxml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;chooseAvatar&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;chooseAvatar&quot;</span> <span class="attr">bindchooseavatar</span>=<span class="string">&quot;chooseAvatar&quot;</span> <span class="attr">plain</span>=<span class="string">&quot;ture&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 160rpx; border: none;color: #6e6e6e;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;userAvatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;userInfo.avatarUrl&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><figure class="highlight typescript"><figcaption><span>typescript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">chooseAvatar</span>(<span class="params">e: <span class="built_in">any</span></span>) &#123;                <span class="comment">//用户更换头像</span></span><br><span class="line">    <span class="comment">//e.detail 已经是 avatarUrl：&quot;...&quot;的格式</span></span><br><span class="line">    <span class="keyword">let</span> &#123; avatarUrl &#125; = e.<span class="property">detail</span></span><br><span class="line"> </span><br><span class="line">    wx.<span class="property">cloud</span>.<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;uploadAvatar&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        avatarUrl</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; result &#125; = <span class="keyword">await</span> wx.<span class="property">cloud</span>.<span class="title function_">callFunction</span>(&#123;  <span class="comment">// 调用登录云函数，不传参，用以更新页面中的用户信息</span></span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;loginOrSignup&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">userInfo</span>: result &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="uploadAvatar，更新头像"><a href="#uploadAvatar，更新头像" class="headerlink" title="uploadAvatar，更新头像"></a>uploadAvatar，更新头像</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">cloud.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: cloud.<span class="property">DYNAMIC_CURRENT_ENV</span> &#125;) <span class="comment">// 使用当前云环境</span></span><br><span class="line"><span class="keyword">const</span> db = cloud.<span class="title function_">database</span>()</span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="variable constant_">OPENID</span> &#125; = cloud.<span class="title function_">getWXContext</span>()</span><br><span class="line">  <span class="keyword">const</span> &#123; avatarUrl &#125; = event</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    db.<span class="title function_">collection</span>(<span class="string">&#x27;user&#x27;</span>).<span class="title function_">where</span>(&#123;</span><br><span class="line">      <span class="attr">_openId</span>: <span class="variable constant_">OPENID</span></span><br><span class="line">    &#125;).<span class="title function_">update</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        avatarUrl</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">success</span>:<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> avatarUrl</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序实现类似qq界面侧滑效果</title>
    <url>/2023/06/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BCqq%E7%95%8C%E9%9D%A2%E4%BE%A7%E6%BB%91%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h2 id="效果浏览"><a href="#效果浏览" class="headerlink" title="效果浏览"></a>效果浏览</h2><img src="/images/%E4%BE%A7%E6%BB%91%E7%95%8C%E9%9D%A2.gif" class="center" width="200" title="效果演示" alt="侧滑界面">

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;outBox&quot;</span> <span class="attr">bindtouchstart</span>=<span class="string">&quot;out_touchStart&quot;</span> <span class="attr">bindtouchmove</span>=<span class="string">&quot;out_touchMove&quot;</span> <span class="attr">bindtouchend</span>=<span class="string">&quot;out_touchEnd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;width: 100vw;text-align: center;&quot;</span>&gt;</span>主界面<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;sliderPage&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform:translateX(&#123;&#123;moveX&#125;&#125;);&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>侧滑界面<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outBox</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.466</span>);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.sliderPage</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80vw</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.842</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="number">#00000038</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">80vw</span>);</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">fullWidth</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">vw</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">moveX</span>: <span class="string">&#x27;-80vw&#x27;</span>,</span><br><span class="line">    <span class="attr">startX</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">sliderActive</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">watchMoveX</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">out_touchStart</span>(<span class="params">e: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; touches &#125; = e</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">startX</span>: touches[<span class="number">0</span>].<span class="property">clientX</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">out_touchMove</span>(<span class="params">e: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; touches &#125; = e</span><br><span class="line">    <span class="keyword">let</span> nowX = touches[<span class="number">0</span>].<span class="property">clientX</span></span><br><span class="line">    <span class="keyword">let</span> moveX = nowX - <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">startX</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">sliderActive</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (moveX &gt;= <span class="number">0</span> || moveX &lt; -(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">fullWidth</span> * <span class="number">0.8</span>)) <span class="keyword">return</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">moveX</span>: <span class="string">`<span class="subst">$&#123;moveX&#125;</span>px`</span>,</span><br><span class="line">        <span class="attr">watchMoveX</span>: moveX</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (moveX &lt;= <span class="number">0</span> || moveX &gt; (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">fullWidth</span> * <span class="number">0.8</span>)) <span class="keyword">return</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">moveX</span>: <span class="string">`<span class="subst">$&#123;-<span class="number">80</span> * <span class="variable language_">this</span>.data.vw + moveX&#125;</span>px`</span>,</span><br><span class="line">        <span class="attr">watchMoveX</span>: moveX</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">out_touchEnd</span>(<span class="params">e: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">sliderActive</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">watchMoveX</span> &gt; (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">fullWidth</span> / <span class="number">4</span>)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">moveX</span>: <span class="string">`<span class="subst">$&#123;<span class="number">0</span>&#125;</span>vw`</span>,</span><br><span class="line">          <span class="attr">sliderActive</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">watchMoveX</span>: <span class="number">0</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">moveX</span>: <span class="string">`<span class="subst">$&#123;-<span class="number">80</span>&#125;</span>vw`</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">watchMoveX</span> &lt; -(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">fullWidth</span> / <span class="number">4</span>)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">moveX</span>: <span class="string">`<span class="subst">$&#123;-<span class="number">80</span>&#125;</span>vw`</span>,</span><br><span class="line">          <span class="attr">sliderActive</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">watchMoveX</span>: <span class="number">0</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">moveX</span>: <span class="string">&#x27;0vw&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// ------------------------------</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">createSelectorQuery</span>().<span class="title function_">select</span>(<span class="string">&quot;.outBox&quot;</span>).<span class="title function_">boundingClientRect</span>().<span class="title function_">exec</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">vw</span>: res[<span class="number">0</span>].<span class="property">width</span> / <span class="number">100</span>,</span><br><span class="line">        <span class="attr">fullWidth</span>: res[<span class="number">0</span>].<span class="property">width</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  ....<span class="comment">//省略其他周期函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>实现这种侧滑效果的方法有很多，这只是其中一种<br>两个界面是嵌套关系，因此可以只通过外部元素节点，也就是主界面的touch控制来实现滑动效果</p>
]]></content>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>篇七 单臂路由</title>
    <url>/2023/07/21/%E7%BD%91%E7%BB%9C-Ensp/%E7%AF%87%E4%B8%83-%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="单臂路由"><a href="#单臂路由" class="headerlink" title="单臂路由"></a>单臂路由</h2><p>单臂路由（One-Arm Routing）是一种特定的网络部署架构，其中路由器通过一个接口与源网络相连，并通过同一个接口与目标网络相连。在这种架构中，单个物理接口用于连接不同的网络，并处理流量的转发和路由。</p>
<p>常见的场景是将单臂路由用于网络地址转换（NAT）或实施访问控制列表（ACL）。使用单臂路由，可以将所有流量引导到路由器上，然后根据配置的规则和策略，将流量转发到目标网络或执行其他操作。这种部署方式可以在较小的网络环境中实现较灵活的流量控制和转发。</p>
<p>单臂路由在某些情况下会带来一些问题，例如可能导致网络拥塞、延迟增加以及安全性降低。因此，在部署单臂路由时需要考虑网络负载、带宽需求以及安全性需求等方面的因素。</p>
<h2 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h2><p>ARP（Address Resolution Protocol）是一种用于将IP地址解析为MAC地址的网络协议。它在局域网中起到了重要的作用，帮助主机在通信过程中确定目标主机的物理地址。</p>
<p>在TCP&#x2F;IP协议中，每个主机都有一个唯一的IP地址用于网络通信。然而，在以太网等物理网络中，通信需要通过MAC地址来实现。因此，当主机需要与目标主机通信时，它需要知道目标主机的MAC地址。</p>
<p>这时候就需要使用ARP协议来进行地址解析。主机通过广播一个ARP请求消息来询问网络中的其他主机，询问某个IP地址对应的MAC地址。其他主机收到该请求后，如果它们拥有该IP地址，就会回复一个ARP响应消息，告知请求主机对应的MAC地址。</p>
<p>ARP协议的工作过程大致如下：</p>
<ol>
<li>主机A需要与主机B通信，但只知道主机B的IP地址，不知道MAC地址。</li>
<li>主机A发送一个ARP请求广播消息，询问网络中是否有主机B的MAC地址。</li>
<li>其他主机收到ARP请求后，检查自己的IP地址是否与请求中的目标IP地址相匹配。</li>
<li>如果有主机的IP地址与目标IP地址匹配，它会发送一个ARP响应消息，告知主机A自己的MAC地址。</li>
<li>主机A收到ARP响应后，就知道了主机B的MAC地址，可以使用该地址进行通信。</li>
</ol>
<p>一旦主机A获得了主机B的MAC地址，它就可以将数据包封装成以太网帧，并通过物理网络发送给主机B。这样，ARP协议帮助主机在通信过程中建立了IP地址与MAC地址之间的映射关系，实现了有效的网络通信。</p>
<h2 id="什么情况下需要开启arp"><a href="#什么情况下需要开启arp" class="headerlink" title="什么情况下需要开启arp"></a>什么情况下需要开启arp</h2><p>在常规情况下，路由器不需要开启 ARP（地址解析协议），因为路由器主要用于转发数据包，而不直接与主机通信。ARP主要用于在同一局域网中解析 IP 地址与 MAC 地址的对应关系。</p>
<p>然而，在某些特殊情况下，路由器可能需要开启 ARP。以下是一些可能需要开启 ARP 的情况：</p>
<ol>
<li>路由器作为局域网的默认网关：当路由器作为局域网中主机的默认网关时，它需要能够解析其他主机的 IP 地址与 MAC 地址的对应关系，以便正确转发数据包。</li>
<li>路由器与主机之间进行管理或配置：在某些情况下，网络管理员可能需要直接与路由器进行管理或配置，这时候路由器需要能够与主机进行通信，以便进行相关操作。</li>
<li>路由器上存在虚拟接口或子接口：在一些特殊的网络配置中，路由器可能会创建虚拟接口或子接口，这些接口需要能够与主机进行通信，以便进行特定的功能或服务。</li>
</ol>
<p>需要注意的是，开启 ARP 可能会增加网络的安全风险，因为 ARP 是一个基于广播的协议，可能会导致 ARP 欺骗攻击。因此，在开启 ARP 时，需要采取相应的安全措施，如使用 ARP 防护功能或限制 ARP 请求的范围。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><img src="/images/%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1%E5%AE%9E%E9%AA%8C%E5%87%86%E5%A4%87.png" class="" width="500">

<p>交换机一台，AR2220路由器一台，pc若干</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>交换机配置vlan、划分vlan、放行vlan</li>
<li>路由配置vlan、子接口终结vlan、子接口开启arp广播、子接口添加网关ip</li>
</ol>
<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Huawei]vlan batch 10 20</span><br><span class="line">[Huawei]int g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port link-type access </span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port default vlan 10</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]int g0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port link-type access</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port default vlan 20</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]int g0/0/3</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port link-type trunk </span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port trunk allow-pass vlan all</span><br></pre></td></tr></table></figure>



<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Huawei]vlan batch 10 20</span><br><span class="line">Info: This operation may take a few seconds. Please wait for a moment...done.</span><br><span class="line">[Huawei]int g0/0/0.10</span><br><span class="line">[Huawei-GigabitEthernet0/0/0.10]dot1q termination vid 10</span><br><span class="line">[Huawei-GigabitEthernet0/0/0.10]arp broadcast enable </span><br><span class="line">[Huawei-GigabitEthernet0/0/0.10]ip address 1.1.1.1 255.255.255.0</span><br><span class="line"></span><br><span class="line">[Huawei-GigabitEthernet0/0/0.10]int g0/0/0.20</span><br><span class="line">[Huawei-GigabitEthernet0/0/0.20]dot1q termination vid 20</span><br><span class="line">[Huawei-GigabitEthernet0/0/0.20]arp broadcast enable</span><br><span class="line">[Huawei-GigabitEthernet0/0/0.20]ip address 2.2.2.1 255.255.255.0</span><br><span class="line">Jul 23 2023 00:08:01-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[3]:The line protocol</span><br><span class="line"> IP on the interface GigabitEthernet0/0/0.20 has entered the UP state. </span><br></pre></td></tr></table></figure>



<h1 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC1&gt;</span><span class="language-bash">ping 2.2.2.254</span></span><br><span class="line"></span><br><span class="line">Ping 2.2.2.254: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">Request timeout!</span><br><span class="line">Request timeout!</span><br><span class="line">From 2.2.2.254: bytes=32 seq=3 ttl=127 time=78 ms</span><br><span class="line">From 2.2.2.254: bytes=32 seq=4 ttl=127 time=78 ms</span><br><span class="line">From 2.2.2.254: bytes=32 seq=5 ttl=127 time=79 ms</span><br><span class="line"></span><br><span class="line">--- 2.2.2.254 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  3 packet(s) received</span><br><span class="line">  40.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 0/78/79 ms</span><br><span class="line"></span><br><span class="line">------------------------分界线--------------------------------------</span><br><span class="line"><span class="meta prompt_">PC2&gt;</span><span class="language-bash">ping 1.1.1.254</span></span><br><span class="line"></span><br><span class="line">Ping 1.1.1.254: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">Request timeout!</span><br><span class="line">From 1.1.1.254: bytes=32 seq=2 ttl=127 time=78 ms</span><br><span class="line">From 1.1.1.254: bytes=32 seq=3 ttl=127 time=78 ms</span><br><span class="line">From 1.1.1.254: bytes=32 seq=4 ttl=127 time=63 ms</span><br><span class="line">From 1.1.1.254: bytes=32 seq=5 ttl=127 time=78 ms</span><br><span class="line"></span><br><span class="line">--- 1.1.1.254 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  4 packet(s) received</span><br><span class="line">  20.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 0/74/78 ms</span><br><span class="line">  </span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">//此时pc4和pc1、pc2没有了vlan隔离</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">PC4&gt;</span><span class="language-bash">ping 1.1.1.254</span></span><br><span class="line"></span><br><span class="line">Ping 1.1.1.254: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">Request timeout!</span><br><span class="line">From 1.1.1.254: bytes=32 seq=2 ttl=127 time=47 ms</span><br><span class="line">From 1.1.1.254: bytes=32 seq=3 ttl=127 time=16 ms</span><br><span class="line">From 1.1.1.254: bytes=32 seq=4 ttl=127 time=31 ms</span><br><span class="line">From 1.1.1.254: bytes=32 seq=5 ttl=127 time=62 ms</span><br><span class="line"></span><br><span class="line">--- 1.1.1.254 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  4 packet(s) received</span><br><span class="line">  20.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 0/39/62 ms</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">PC1&gt;</span><span class="language-bash">ping 3.3.3.254</span></span><br><span class="line"></span><br><span class="line">Ping 3.3.3.254: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">Request timeout!</span><br><span class="line">From 3.3.3.254: bytes=32 seq=2 ttl=127 time=47 ms</span><br><span class="line">From 3.3.3.254: bytes=32 seq=3 ttl=127 time=31 ms</span><br><span class="line">From 3.3.3.254: bytes=32 seq=4 ttl=127 time=31 ms</span><br><span class="line">From 3.3.3.254: bytes=32 seq=5 ttl=127 time=31 ms</span><br><span class="line"></span><br><span class="line">--- 3.3.3.254 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  4 packet(s) received</span><br><span class="line">  20.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 0/35/47 ms</span><br></pre></td></tr></table></figure>



<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>问题来了，这么做的意义是什么？</p>
<p>不使用vlan，将pc1、pc2的IP设置为同一网段不也可以进行通信吗？</p>
<p>这样做的目的就是<u>隔离了有可能出现的网络故障，但是保障了设备之间的通信</u></p>
]]></content>
      <tags>
        <tag>网络-Ensp</tag>
      </tags>
  </entry>
  <entry>
    <title>篇一 DHCP</title>
    <url>/2023/07/09/%E7%BD%91%E7%BB%9C-Ensp/%E7%AF%87%E4%B8%80-DHCP/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>DHCP（Dynamic Host Configuration Protocol）是一个网络协议，用于自动分配IP地址和其他相关配置信息给网络设备。</p>
<p>在一个局域网中，DHCP服务器负责管理并分配IP地址给网络上的设备。当一台设备加入局域网或者需要更新自己的IP地址时，它会向DHCP服务器发送一个请求，并在服务器上进行IP地址分配。DHCP服务器收到请求后，会从预定义的IP地址池中选择一个可用的IP地址，并将其分配给设备。此外，DHCP服务器还可以为设备分配其他网络配置，如子网掩码、网关、DNS服务器等。</p>
<p>DHCP的优势在于它能够自动管理IP地址分配，简化了网络管理工作。通过使用DHCP，管理员可以集中管理IP地址的分配和配置，而无需手动为每个设备进行配置。DHCP还支持地址重用和动态更新配置，使得系统资源能够更有效地利用。</p>
<p>总而言之，DHCP是一个用于自动分配IP地址和相关配置信息的协议，它简化了网络管理工作，并提高了网络资源的利用效率。</p>
<h2 id="Ensp"><a href="#Ensp" class="headerlink" title="Ensp"></a>Ensp</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>AR2220路由器一台，S5700三层交换机一台，pc机若干</p>
<img src="/images/ensp-1.png" class="center" width="500">

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>输入 <code>sy</code> 进入路由系统视图，然后输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dhcp enable</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入路由器对应接口，开启接口DHCP服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">interface g0/0/0</span><br><span class="line"></span><br><span class="line">dhcp select interface</span><br></pre></td></tr></table></figure>
</li>
<li><p>pc机刷新dhcp配置即可</p>
</li>
</ol>
<h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;sy</span><br><span class="line"></span><br><span class="line">[Huawei]interface g0/0/0</span><br><span class="line"></span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.1.1 255.255.255.0</span><br><span class="line"></span><br><span class="line">[Huawei-GigabitEthernet0/0/0] quit</span><br><span class="line"></span><br><span class="line">[Huawei]dhcp enable </span><br><span class="line"></span><br><span class="line">[Huawei-GigabitEthernet0/0/0]dhcp select interface</span><br></pre></td></tr></table></figure>



<h3 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ipconfig</span></span><br><span class="line"></span><br><span class="line">Link local IPv6 address...........: fe80::5689:98ff:feec:2846</span><br><span class="line">IPv6 address......................: :: / 128</span><br><span class="line">IPv6 gateway......................: ::</span><br><span class="line">IPv4 address......................: 192.168.1.254</span><br><span class="line">Subnet mask.......................: 255.255.255.0</span><br><span class="line">Gateway...........................: 192.168.1.1</span><br><span class="line">Physical address..................: 54-89-98-EC-28-46</span><br><span class="line">DNS server........................: 0.0.0.0</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>网络-Ensp</tag>
      </tags>
  </entry>
  <entry>
    <title>篇三 网关</title>
    <url>/2023/07/10/%E7%BD%91%E7%BB%9C-Ensp/%E7%AF%87%E4%B8%89-%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>网关（Gateway）是在计算机网络中连接不同网络的设备或软件。它充当了网络中不同协议、不同网络体系结构之间的桥梁，负责转发数据包、协议转换和数据格式转换等功能。</p>
<p>网关可以连接不同类型的网络，如将局域网（LAN）连接到广域网（WAN），或将不同的协议（如TCP&#x2F;IP和IPX&#x2F;SPX）进行转换。<u>它可以是硬件设备，如路由器、交换机或防火墙，也可以是软件程序，如网络代理服务器或应用层网关。</u></p>
<p>网关在网络通信中扮演重要角色，它能够实现以下功能：</p>
<ol>
<li><p>数据包转发：网关接收来自源网络的数据包，并将其转发到目标网络上的正确目的地。</p>
</li>
<li><p>协议转换：网关可以将来自一个协议的数据包转换为另一个协议的数据包，以便不同类型的网络能够进行通信。</p>
</li>
<li><p>数据格式转换：网关可以将数据包的格式从一种形式转换为另一种形式，以便目标网络能够正确解析和处理数据。</p>
</li>
<li><p>安全性控制：网关可以实施安全策略，如防火墙功能，对网络流量进行过滤和检查，保护网络免受恶意攻击和未经授权的访问。</p>
</li>
</ol>
<p>总之，网关在网络中起到了连接不同网络、协议转换和数据转发等重要作用，使得不同网络能够互相通信和交换数据。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在篇二的基础上增加一台pc4,与路由相连</p>
<img src="/images/%E7%BD%91%E5%85%B3%E5%AE%9E%E9%AA%8C%E5%87%86%E5%A4%87.png" class="center" width="500">




<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>为路由与pc4相连端口添加ip</li>
<li>为pc1和pc4添加静态ip和网关</li>
</ol>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><p>pc1</p>
<img src="/images/pc1%E8%AE%BE%E7%BD%AE%E7%BD%91%E5%85%B3.png" class="center" width="500">

<p>pc4</p>
<img src="/images/pc4%E8%AE%BE%E7%BD%AE%E7%BD%91%E5%85%B3.png" class="center" width="500">



<h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><p><strong>pc1 ping pc4</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 100.100.100.100</span></span><br><span class="line"></span><br><span class="line">Ping 100.100.100.100: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">Request timeout!</span><br><span class="line">From 100.100.100.100: bytes=32 seq=2 ttl=127 time=47 ms</span><br><span class="line">From 100.100.100.100: bytes=32 seq=3 ttl=127 time=31 ms</span><br><span class="line">From 100.100.100.100: bytes=32 seq=4 ttl=127 time=32 ms</span><br><span class="line">From 100.100.100.100: bytes=32 seq=5 ttl=127 time=47 ms</span><br><span class="line"></span><br><span class="line">--- 100.100.100.100 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  4 packet(s) received</span><br><span class="line">  20.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 0/39/47 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>pc4 ping pc1</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 192.168.1.168</span></span><br><span class="line"></span><br><span class="line">Ping 192.168.1.168: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">Request timeout!</span><br><span class="line">Request timeout!</span><br><span class="line">From 192.168.1.168: bytes=32 seq=3 ttl=127 time=32 ms</span><br><span class="line">From 192.168.1.168: bytes=32 seq=4 ttl=127 time=47 ms</span><br><span class="line">From 192.168.1.168: bytes=32 seq=5 ttl=127 time=47 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.1.168 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  3 packet(s) received</span><br><span class="line">  40.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 0/42/47 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>pc4 访问篇二中的域名</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping www.example.com</span></span><br><span class="line"></span><br><span class="line">Ping www.example.com [192.168.1.253]: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">Request timeout!</span><br><span class="line">From 192.168.1.253: bytes=32 seq=2 ttl=127 time=31 ms</span><br><span class="line">From 192.168.1.253: bytes=32 seq=3 ttl=127 time=47 ms</span><br><span class="line">From 192.168.1.253: bytes=32 seq=4 ttl=127 time=31 ms</span><br><span class="line">From 192.168.1.253: bytes=32 seq=5 ttl=127 time=47 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.1.253 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  4 packet(s) received</span><br><span class="line">  20.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 0/39/47 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>网络-Ensp</tag>
      </tags>
  </entry>
  <entry>
    <title>篇二 Dns 域名解析</title>
    <url>/2023/07/10/%E7%BD%91%E7%BB%9C-Ensp/%E7%AF%87%E4%BA%8C-Dns%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>DNS（Domain Name System，域名系统）是互联网中用于将域名转换为对应IP地址的系统。它充当了互联网上的“电话簿”，将易于记忆的域名（如<a href="http://www.example.com)映射到对应的ip地址(如192.0.2.1)./">www.example.com）映射到对应的IP地址（如192.0.2.1）。</a></p>
<p>DNS的主要功能包括域名解析、域名注册和域名管理。 域名解析是DNS的核心功能，当用户在浏览器中输入一个域名时，DNS系统会将该域名解析为对应的IP地址，以便建立与目标服务器的连接。域名注册是指将一个域名注册到DNS系统中，以确保该域名在互联网上的唯一性。域名管理则涉及到对域名的配置、修改和管理，包括设置域名的DNS记录、子域名管理等。 </p>
<p>DNS采用分层的结构，由多个DNS服务器组成，分为根域名服务器、顶级域名服务器、权威域名服务器和本地域名服务器等。当本地域名服务器无法解析域名时，会向上级域名服务器查询，直到找到对应的IP地址。 </p>
<p>简单来说，<u>就是当用户访问某个域名时，会先在域名解析服务器上查找该域名对应的ip地址，找到后再访问该IP地址，用户可以使用易于记忆的域名来访问互联网上的各种资源，而无需记住复杂的IP地址。</u>同时，DNS还支持其他功能，如邮件服务器的查找、反向解析等。</p>
<h2 id="准备内容"><a href="#准备内容" class="headerlink" title="准备内容"></a>准备内容</h2><p>ar2220路由一台、server服务器一台、s5700三层交换机一台、pc机若干</p>
<img src="/images/ensp-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" class="center" width="500">


<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>给服务器添加自身ip地址，在服务器中的dns解析服务添加域名列表，并启动服务</li>
<li>在路由对应接口输入<code>dhcp server dns-list [域名解析服务器ip]</code></li>
<li>pc机刷新dhcp配置</li>
</ol>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h3 id="添加域名"><a href="#添加域名" class="headerlink" title="添加域名"></a>添加域名</h3><img src="/images/dns%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0ip.png" class="center" width="500">


<img src="/images/ensp-dns%E6%9C%8D%E5%8A%A1%E5%99%A8.png" class="center" width="500">

<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Huawei]interface g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]dhcp server dns-list 192.168.1.100</span><br></pre></td></tr></table></figure>



<h3 id="刷新并检验"><a href="#刷新并检验" class="headerlink" title="刷新并检验"></a>刷新并检验</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ipconfig</span></span><br><span class="line"></span><br><span class="line">Link local IPv6 address...........: fe80::5689:98ff:feec:2846</span><br><span class="line">IPv6 address......................: :: / 128</span><br><span class="line">IPv6 gateway......................: ::</span><br><span class="line">IPv4 address......................: 192.168.1.254</span><br><span class="line">Subnet mask.......................: 255.255.255.0</span><br><span class="line">Gateway...........................: 192.168.1.1</span><br><span class="line">Physical address..................: 54-89-98-EC-28-46</span><br><span class="line">DNS server........................: 192.168.1.100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping www.example.com</span></span><br><span class="line"></span><br><span class="line">Ping www.example.com [192.168.1.253]: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.1.253: bytes=32 seq=1 ttl=128 time=47 ms</span><br><span class="line">From 192.168.1.253: bytes=32 seq=2 ttl=128 time=15 ms</span><br><span class="line">From 192.168.1.253: bytes=32 seq=3 ttl=128 time=47 ms</span><br><span class="line">From 192.168.1.253: bytes=32 seq=4 ttl=128 time=47 ms</span><br><span class="line">From 192.168.1.253: bytes=32 seq=5 ttl=128 time=31 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.1.253 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 15/37/47 ms</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>网络-Ensp</tag>
      </tags>
  </entry>
  <entry>
    <title>篇五 vlan</title>
    <url>/2023/07/20/%E7%BD%91%E7%BB%9C-Ensp/%E7%AF%87%E4%BA%94-vlan/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>VLAN（Virtual Local Area Network）是一种虚拟局域网技术，用于将一个物理网络划分为多个逻辑上独立的虚拟网络。VLAN可以提供更好的网络管理和安全性。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><img src="/images/vlan%E5%87%86%E5%A4%87.png" class="center" width="500">

<p>三层交换机两台、pc机若干</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>创建vlan —— <code>vlan [vlan号]</code> </p>
</li>
<li><p>划分vlan：<br>  （1）进入接口<br>  （2）<code>port link-type access</code> （终端，如电脑、打印机等为access；其他交换机则为trunk）<br>  （3）<code>port default vlan [vlan号]</code></p>
</li>
<li><p>交换机之间允许vlan通信<br>  （1）进入接口<br>  （2）<code>port link-type trunk</code><br>  （3）<code>port trunk allow-pass vlan [vlan号]</code></p>
</li>
</ol>
<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><ol>
<li><p>LSW1(第一台交换机)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;sy</span><br><span class="line">Enter system view, return user view with Ctrl+Z.</span><br><span class="line"></span><br><span class="line">//创建vlan</span><br><span class="line">[Huawei]vlan 10</span><br><span class="line">[Huawei-vlan10]q</span><br><span class="line">[Huawei]vlan 20</span><br><span class="line">[Huawei-vlan20]q</span><br><span class="line"></span><br><span class="line">//划分vlan</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port link-type access </span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port default vlan 10</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]q</span><br><span class="line"></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port link-type access 	</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port default vlan 20</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]q</span><br><span class="line"></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/3</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port link-type access 	</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port default vlan 20</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]q</span><br><span class="line"></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/4</span><br><span class="line">[Huawei-GigabitEthernet0/0/4]port link-type trunk</span><br><span class="line">[Huawei-GigabitEthernet0/0/4]port trunk allow-pass vlan 10</span><br><span class="line">[Huawei-GigabitEthernet0/0/4]port trunk allow-pass vlan 20</span><br></pre></td></tr></table></figure>


</li>
<li><p>LSW2(第二台交换机)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;Huawei&gt;sy</span><br><span class="line">Enter system view, return user view with Ctrl+Z.</span><br><span class="line"></span><br><span class="line">//创建vlan</span><br><span class="line">[Huawei]vlan 10</span><br><span class="line">[Huawei-vlan10]q</span><br><span class="line">[Huawei]vlan 20</span><br><span class="line">[Huawei-vlan20]q</span><br><span class="line"></span><br><span class="line">//划分vlan</span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port link-type access </span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port default vlan 10</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]q</span><br><span class="line"></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port link-type access </span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port default vlan 20</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]q</span><br><span class="line"></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/3</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port link-type trunk </span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port trunk allow-pass vlan 10</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port trunk allow-pass vlan 20</span><br></pre></td></tr></table></figure>


</li>
<li><p>给pc机的ip从左到右依次设为1.1.1.1~1.1.1.5</p>
</li>
</ol>
<h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><p><strong>pc1 ping pc2，由于不在同一个vlan中，ping操作失败</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 1.1.1.2</span></span><br><span class="line"></span><br><span class="line">Ping 1.1.1.2: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 1.1.1.1: Destination host unreachable</span><br><span class="line">From 1.1.1.1: Destination host unreachable</span><br><span class="line">From 1.1.1.1: Destination host unreachable</span><br><span class="line">From 1.1.1.1: Destination host unreachable</span><br><span class="line">From 1.1.1.1: Destination host unreachable</span><br><span class="line"></span><br><span class="line">--- 1.1.1.2 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  0 packet(s) received</span><br><span class="line">  100.00% packet loss</span><br></pre></td></tr></table></figure>

<p><strong>同样的，pc2 ping pc1 也是失败</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 1.1.1.1</span></span><br><span class="line"></span><br><span class="line">Ping 1.1.1.1: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 1.1.1.2: Destination host unreachable</span><br><span class="line">From 1.1.1.2: Destination host unreachable</span><br><span class="line">From 1.1.1.2: Destination host unreachable</span><br><span class="line">From 1.1.1.2: Destination host unreachable</span><br><span class="line">From 1.1.1.2: Destination host unreachable</span><br><span class="line"></span><br><span class="line">--- 1.1.1.1 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  0 packet(s) received</span><br><span class="line">  100.00% packet loss</span><br></pre></td></tr></table></figure>

<p><strong>pc1 与 pc5 互ping也是失败</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//pc1 ping pc5</span><br><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 1.1.1.5</span></span><br><span class="line"></span><br><span class="line">Ping 1.1.1.5: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 1.1.1.1: Destination host unreachable</span><br><span class="line">From 1.1.1.1: Destination host unreachable</span><br><span class="line">From 1.1.1.1: Destination host unreachable</span><br><span class="line">From 1.1.1.1: Destination host unreachable</span><br><span class="line">From 1.1.1.1: Destination host unreachable</span><br><span class="line"></span><br><span class="line">--- 1.1.1.5 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  0 packet(s) received</span><br><span class="line">  100.00% packet loss</span><br><span class="line">  </span><br><span class="line">//pc5 ping pc1</span><br><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 1.1.1.1</span></span><br><span class="line"></span><br><span class="line">Ping 1.1.1.1: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 1.1.1.5: Destination host unreachable</span><br><span class="line">From 1.1.1.5: Destination host unreachable</span><br><span class="line">From 1.1.1.5: Destination host unreachable</span><br><span class="line">From 1.1.1.5: Destination host unreachable</span><br><span class="line">From 1.1.1.5: Destination host unreachable</span><br><span class="line"></span><br><span class="line">--- 1.1.1.1 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  0 packet(s) received</span><br><span class="line">  100.00% packet loss</span><br></pre></td></tr></table></figure>



<p><strong>相同vlan下互ping不影响</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//pc1 ping pc4</span><br><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 1.1.1.4</span></span><br><span class="line"></span><br><span class="line">Ping 1.1.1.4: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 1.1.1.4: bytes=32 seq=1 ttl=128 time=47 ms</span><br><span class="line">From 1.1.1.4: bytes=32 seq=2 ttl=128 time=78 ms</span><br><span class="line">From 1.1.1.4: bytes=32 seq=3 ttl=128 time=78 ms</span><br><span class="line">From 1.1.1.4: bytes=32 seq=4 ttl=128 time=79 ms</span><br><span class="line">From 1.1.1.4: bytes=32 seq=5 ttl=128 time=63 ms</span><br><span class="line"></span><br><span class="line">--- 1.1.1.4 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 47/69/79 ms</span><br><span class="line">  </span><br><span class="line">//pc4 ping pc1</span><br><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 1.1.1.1</span></span><br><span class="line"></span><br><span class="line">Ping 1.1.1.1: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 1.1.1.1: bytes=32 seq=1 ttl=128 time=63 ms</span><br><span class="line">From 1.1.1.1: bytes=32 seq=2 ttl=128 time=62 ms</span><br><span class="line">From 1.1.1.1: bytes=32 seq=3 ttl=128 time=78 ms</span><br><span class="line">From 1.1.1.1: bytes=32 seq=4 ttl=128 time=62 ms</span><br><span class="line">From 1.1.1.1: bytes=32 seq=5 ttl=128 time=63 ms</span><br><span class="line"></span><br><span class="line">--- 1.1.1.1 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 62/65/78 ms</span><br><span class="line">  </span><br><span class="line">//pc2 ping pc5</span><br><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 1.1.1.5</span></span><br><span class="line"></span><br><span class="line">Ping 1.1.1.5: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 1.1.1.5: bytes=32 seq=1 ttl=128 time=94 ms</span><br><span class="line">From 1.1.1.5: bytes=32 seq=2 ttl=128 time=78 ms</span><br><span class="line">From 1.1.1.5: bytes=32 seq=3 ttl=128 time=79 ms</span><br><span class="line">From 1.1.1.5: bytes=32 seq=4 ttl=128 time=78 ms</span><br><span class="line">From 1.1.1.5: bytes=32 seq=5 ttl=128 time=78 ms</span><br><span class="line"></span><br><span class="line">--- 1.1.1.5 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 78/81/94 ms</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>网络-Ensp</tag>
      </tags>
  </entry>
  <entry>
    <title>篇八-acl访问控制</title>
    <url>/2023/07/27/%E7%BD%91%E7%BB%9C-Ensp/%E7%AF%87%E5%85%AB-acl%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>网络-Ensp</tag>
      </tags>
  </entry>
  <entry>
    <title>篇四 静态路由</title>
    <url>/2023/07/17/%E7%BD%91%E7%BB%9C-Ensp/%E7%AF%87%E5%9B%9B-%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>静态路由是网络中使用静态路由表来确定数据包的传输路径的一种路由方式。它是通过手动配置路由器上的路由表来指定目标网络和下一跳路由器的关系，以确定数据包的传输路径。</p>
<p>在静态路由中，网络管理员手动配置路由器上的路由表，将目标网络的 IP 地址和对应的下一跳路由器的 IP 地址进行映射。当路由器收到一个数据包时，它会根据数据包的目标 IP 地址查找路由表，找到与目标 IP 地址匹配的条目，并将数据包发送到相应的下一跳路由器。下一跳路由器将继续根据路由表将数据包转发到下一个路由器，直到数据包到达目标网络。</p>
<p>静态路由的主要特点包括：</p>
<ol>
<li>静态路由是手动配置的，不会自动适应网络变化。如果网络拓扑发生变化，管理员需要手动更新路由表。</li>
<li>静态路由是固定的，不会根据网络负载或链路状态进行动态调整。所有数据包都将按照路由表中的配置进行转发。</li>
<li>静态路由的配置相对简单，适用于小型网络或网络拓扑不经常变化的情况。</li>
<li>静态路由的优点是稳定性高，因为路由表不会频繁变化，不会产生额外的路由协议开销。</li>
</ol>
<p>静态路由适用于简单的网络环境或需要精确控制数据包传输路径的情况。对于复杂的网络环境或需要自动适应网络变化的情况，通常会使用动态路由协议来实现路由功能。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>AR2220 路由两台、交换机一台、PC 机若干</p>
<img src="/images/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E5%AE%9E%E9%AA%8C%E5%87%86%E5%A4%87.png" class="center" width="500">



<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在路由上输入指令，告诉路由去往目的ip网段应该走的下一跳，<u>下一跳指的是下一个经过的路由的接口所对应的ip</u></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip route-static [目标ip（通常是网段）] [子网掩码] [下一跳ip]</span><br></pre></td></tr></table></figure>



<h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h3 id="基础路由配置"><a href="#基础路由配置" class="headerlink" title="基础路由配置"></a>基础路由配置</h3><h4 id="第一台路由"><a href="#第一台路由" class="headerlink" title="第一台路由"></a>第一台路由</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Huawei]interface GigabitEthernet 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.1.1 255.255.255.0</span><br><span class="line"></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip address 192.168.2.1 255.255.255.0</span><br></pre></td></tr></table></figure>

<h4 id="第二台"><a href="#第二台" class="headerlink" title="第二台"></a>第二台</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Huawei]interface GigabitEthernet 0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.2.10 255.255.255.0</span><br><span class="line"></span><br><span class="line">[Huawei]interface GigabitEthernet 0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.3.1 255.255.255.0</span><br></pre></td></tr></table></figure>



<h3 id="配置静态路由"><a href="#配置静态路由" class="headerlink" title="配置静态路由"></a>配置静态路由</h3><h4 id="第一台"><a href="#第一台" class="headerlink" title="第一台"></a>第一台</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Huawei]ip route-static 192.168.3.0 255.255.255.0 192.168.2.10</span><br></pre></td></tr></table></figure>

<h4 id="第二台-1"><a href="#第二台-1" class="headerlink" title="第二台"></a>第二台</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Huawei]ip route-static 192.168.1.0 255.255.255.0 192.168.2.1</span><br></pre></td></tr></table></figure>



<h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><h3 id="pc1-ping-服务器和pc2"><a href="#pc1-ping-服务器和pc2" class="headerlink" title="pc1 ping 服务器和pc2"></a>pc1 ping 服务器和pc2</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 192.168.3.100</span></span><br><span class="line"></span><br><span class="line">Ping 192.168.3.100: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.3.100: bytes=32 seq=1 ttl=126 time=47 ms</span><br><span class="line">From 192.168.3.100: bytes=32 seq=2 ttl=126 time=47 ms</span><br><span class="line">From 192.168.3.100: bytes=32 seq=3 ttl=126 time=47 ms</span><br><span class="line">From 192.168.3.100: bytes=32 seq=4 ttl=126 time=31 ms</span><br><span class="line">From 192.168.3.100: bytes=32 seq=5 ttl=126 time=63 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.3.100 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 31/47/63 ms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 192.168.3.10</span></span><br><span class="line"></span><br><span class="line">Ping 192.168.3.10: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 192.168.3.10: bytes=32 seq=1 ttl=253 time=31 ms</span><br><span class="line">From 192.168.3.10: bytes=32 seq=2 ttl=253 time=32 ms</span><br><span class="line">From 192.168.3.10: bytes=32 seq=3 ttl=253 time=31 ms</span><br><span class="line">From 192.168.3.10: bytes=32 seq=4 ttl=253 time=31 ms</span><br><span class="line">From 192.168.3.10: bytes=32 seq=5 ttl=253 time=31 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.3.10 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 31/31/32 ms</span><br></pre></td></tr></table></figure>

<h3 id="pc2-ping-pc1"><a href="#pc2-ping-pc1" class="headerlink" title="pc2 ping pc1"></a>pc2 ping pc1</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 192.168.1.10</span></span><br><span class="line"></span><br><span class="line">Ping 192.168.1.10: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">Request timeout!</span><br><span class="line">From 192.168.1.10: bytes=32 seq=2 ttl=126 time=31 ms</span><br><span class="line">From 192.168.1.10: bytes=32 seq=3 ttl=126 time=31 ms</span><br><span class="line">From 192.168.1.10: bytes=32 seq=4 ttl=126 time=47 ms</span><br><span class="line">From 192.168.1.10: bytes=32 seq=5 ttl=126 time=16 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.1.10 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  4 packet(s) received</span><br><span class="line">  20.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 0/31/47 ms</span><br></pre></td></tr></table></figure>

<p>注：配置好静态路由后，首次ping操作出现timeout是正常的</p>
]]></content>
      <tags>
        <tag>网络-Ensp</tag>
      </tags>
  </entry>
  <entry>
    <title>篇六 三层交换技术</title>
    <url>/2023/07/21/%E7%BD%91%E7%BB%9C-Ensp/%E7%AF%87%E5%85%AD-%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>三层交换技术是指将网络交换机与路由器的功能结合起来，使交换机能够进行基于网络层（第三层）的转发和路由功能。它在传统二层交换机的基础上增加了路由功能，从而能够更高效地处理大规模网络中的数据流量和转发需求。</p>
<p>三层交换技术的主要特点如下：</p>
<ol>
<li>路由能力：<u>三层交换机具备路由器的基本功能，能够在不同的子网之间进行数据包的转发和路由决策</u>。它能够识别目标IP地址，并根据路由表进行转发决策，使数据能够跨越不同的子网进行传输。</li>
<li>VLAN支持：三层交换机支持虚拟局域网（VLAN）技术，可以将物理网络划分为多个逻辑上独立的虚拟网络。通过VLAN的配置，可以实现更好的网络隔离和安全性。</li>
<li>高性能转发：三层交换机采用硬件加速和快速转发技术，能够高效处理数据包的路由和转发。它可以进行流量控制、负载均衡和快速转发等功能，以提供更快的数据传输速度和更高的性能。</li>
<li>动态路由协议支持：三层交换机一般支持主要的动态路由协议，如OSPF、BGP和RIP等，能够与其他路由器进行动态路由协议的交互和学习，以实现更智能的网络路径选择和故障恢复能力。</li>
</ol>
<p>通过三层交换技术，可以在较大的网络中实现更高效、可靠和有灵活性的数据转发和路由功能，并提供更好的网络性能和管理能力。这对于大型企业、数据中心和服务提供商等具有重要意义。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>交换机两台（其中不与pc相连的交换机必须为三层交换机）、pc若干</p>
<img src="/images/%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF%E5%AE%9E%E9%AA%8C%E5%87%86%E5%A4%87.png" class="center" width="500">



<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>近端交换机为两台pc划分不同的vlan，并为vlan放行</li>
<li>在远端交换机的逻辑接口上添加两台pc的网关ip，即远端交换机在此处起到了网关的作用</li>
</ol>
<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><ol>
<li><p>近端交换机划分vlan，并放行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Huawei]vlan batch 10 20</span><br><span class="line">[Huawei]int g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port link-type access 	</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port de vlan 10</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]int g0/0/2</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port link-type access</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]port de vlan 20</span><br><span class="line">[Huawei-GigabitEthernet0/0/2]int g0/0/3</span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port link-type trunk </span><br><span class="line">[Huawei-GigabitEthernet0/0/3]port trunk allow-pass vlan all </span><br></pre></td></tr></table></figure>
</li>
<li><p>远端交换机配置vlan，并在vlan逻辑接口添加ip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Huawei]int g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]port link-type trunk //此处居然不用放行</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]q</span><br><span class="line">[Huawei]int Vlanif 10</span><br><span class="line">[Huawei-Vlanif10]ip address 1.1.1.1 255.255.255.0</span><br><span class="line">[Huawei-Vlanif10]int Vlanif 20</span><br><span class="line">[Huawei-Vlanif20]ip address 2.2.2.1 255.255.255.0</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 1.1.1.254</span></span><br><span class="line"></span><br><span class="line">Ping 1.1.1.254: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 1.1.1.254: bytes=32 seq=1 ttl=127 time=109 ms</span><br><span class="line">From 1.1.1.254: bytes=32 seq=2 ttl=127 time=63 ms</span><br><span class="line">From 1.1.1.254: bytes=32 seq=3 ttl=127 time=93 ms</span><br><span class="line">From 1.1.1.254: bytes=32 seq=4 ttl=127 time=94 ms</span><br><span class="line">From 1.1.1.254: bytes=32 seq=5 ttl=127 time=78 ms</span><br><span class="line"></span><br><span class="line">--- 1.1.1.254 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 63/87/109 ms</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">PC&gt;</span><span class="language-bash">ping 2.2.2.254</span></span><br><span class="line"></span><br><span class="line">Ping 2.2.2.254: 32 data bytes, Press Ctrl_C to break</span><br><span class="line">From 2.2.2.254: bytes=32 seq=1 ttl=127 time=156 ms</span><br><span class="line">From 2.2.2.254: bytes=32 seq=2 ttl=127 time=94 ms</span><br><span class="line">From 2.2.2.254: bytes=32 seq=3 ttl=127 time=78 ms</span><br><span class="line">From 2.2.2.254: bytes=32 seq=4 ttl=127 time=62 ms</span><br><span class="line">From 2.2.2.254: bytes=32 seq=5 ttl=127 time=94 ms</span><br><span class="line"></span><br><span class="line">--- 2.2.2.254 ping statistics ---</span><br><span class="line">  5 packet(s) transmitted</span><br><span class="line">  5 packet(s) received</span><br><span class="line">  0.00% packet loss</span><br><span class="line">  round-trip min/avg/max = 62/96/156 ms</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>网络-Ensp</tag>
      </tags>
  </entry>
  <entry>
    <title>篇外（一）光纤接入技术与PON</title>
    <url>/2023/07/27/%E7%BD%91%E7%BB%9C-Ensp/%E7%AF%87%E5%A4%96%EF%BC%88%E4%B8%80%EF%BC%89%E5%85%89%E7%BA%A4%E6%8E%A5%E5%85%A5%E6%8A%80%E6%9C%AF%E4%B8%8EPON/</url>
    <content><![CDATA[<h1 id="FTTX"><a href="#FTTX" class="headerlink" title="FTTX"></a>FTTX</h1><p>光纤接入网络（Fiber to the x，简称FTTx）是一种使用光纤作为传输介质的接入网络技术，用于提供高速宽带接入和传输服务。它将光纤延伸到用户的终端，取代了传统的铜线接入方式，提供更高的带宽和更稳定的连接。</p>
<p>光纤接入网络可以分为多种形式，包括：</p>
<ol>
<li><p>光纤到户（Fiber to the Home，简称FTTH）：将光纤延伸到用户家庭，提供高速宽带接入和传输服务。在FTTH中，光纤从中心办公室或分布节点延伸到用户家庭，通过光网络单元（ONU）将光信号转换为电信号，供用户使用。</p>
</li>
<li><p>光纤到楼（Fiber to the Building，简称FTTB）：将光纤延伸到多户建筑物，例如公寓楼或商业大厦。在FTTB中，光纤从中心办公室或分布节点延伸到建筑物内部，通过光网络单元（ONU）将光信号转换为电信号，供建筑物内的多个用户使用。</p>
</li>
<li><p>光纤到街（Fiber to the Curb，简称FTTC）：将光纤延伸到街道或小区的路边，然后使用传统的铜线将信号传输到用户家庭。在FTTC中，光纤从中心办公室或分布节点延伸到街道或小区的路边，通过光网络单元（ONU）将光信号转换为电信号，然后使用铜线将信号传输到用户家庭。</p>
</li>
<li><p>光纤到节点（Fiber To The Node，简称FTTN）：将光纤延伸到距离用户家庭较近的节点，然后使用传统的铜线将信号传输到用户家庭。这种方式相比FTTC，光纤延伸的距离更短，带宽和速度也更高。</p>
</li>
</ol>
<p>光纤接入网络具有高带宽、长距离传输、低干扰和低损耗的优势，可以满足日益增长的宽带需求。它为用户提供了更快速、可靠的互联网接入，支持高清视频、在线游戏、云存储和其他高带宽应用。光纤接入网络是未来通信网络发展的趋势，已经在许多地区得到广泛应用。</p>
<h1 id="PON"><a href="#PON" class="headerlink" title="PON"></a>PON</h1><p>无源光网络（Passive Optical Network，简称PON）是一种光纤传输技术，它采用被动光纤分配器（Passive Optical Splitter）来实现光信号的分配和传输，而不需要使用主动光电转换设备。无源光网络通常用于光纤接入网络（FTTx）中，用于提供高速宽带接入和传输服务。</p>
<ul>
<li>无源光网络的关键特点包括：</li>
</ul>
<ol>
<li><p>被动光纤分配器：无源光网络使用被动光纤分配器来将光信号分发给多个终端用户。被动光纤分配器是一种 pass-through 设备，不需要电力供应或主动调节，因此具有较低的成本、较小的体积和较高的可靠性。</p>
</li>
<li><p>点对多点拓扑结构：无源光网络采用点对多点的拓扑结构，其中一根光纤主干线连接到光线路终端（OLT），通过被动光纤分配器将信号分发给多个终端用户的光网络单元（ONU）。</p>
</li>
<li><p>共享带宽：在无源光网络中，多个终端用户共享同一根光纤主干线的带宽。通过使用时间分割多路访问（Time Division Multiplexing，简称TDM）或波分复用（Wavelength Division Multiplexing，简称WDM）技术，不同的终端用户可以在不同的时间或不同的波长上进行通信，实现带宽的共享。</p>
</li>
</ol>
<p>无源光网络具有高带宽、长距离传输、低成本和低功耗的优势，因此被广泛应用于光纤接入网络中，例如光纤到户（FTTH）、光纤到楼（FTTB）等场景，以提供高速宽带接入和传输服务。</p>
<ul>
<li>PON由以下几个主要组件组成：</li>
</ul>
<ol>
<li><p>OLT（Optical Line Terminal，光线路终端）：OLT是PON的核心设备，位于网络的中央，负责管理和控制整个PON网络。它连接到上层网络，如光纤骨干网或其他网络设备，并向下连接到ODN（Optical Distribution Network，光分布网络）。</p>
</li>
<li><p>ODN（Optical Distribution Network，光分布网络）：ODN是PON中的光纤分发网络，负责将光信号从OLT分发到多个用户的ONT（Optical Network Terminal，光网络终端）。ODN包括光纤、光纤连接器、光纤分纤器等设备，用于传输和分发光信号。</p>
</li>
<li><p>ONT（Optical Network Terminal，光网络终端）：ONT是用户侧的终端设备，负责接收、解析和处理从ODN传输过来的光信号，并将其转换为电信号。ONT通常具有以太网接口，可以连接到用户设备，如计算机、电话、路由器等，实现用户对光纤网络的接入和使用。</p>
</li>
<li><p>光纤：光纤是PON中传输光信号的媒介，用于连接OLT、ODN和ONT。它具有高带宽、低损耗和抗干扰等特性，能够实现高速、稳定的光信号传输。</p>
</li>
<li><p>光纤连接器：光纤连接器用于连接光纤，确保光信号的传输质量和连接的可靠性。常见的光纤连接器类型包括SC、LC、FC等。</p>
</li>
<li><p>光纤分纤器：光纤分纤器用于将光信号从OLT分发到多个用户的ONT。它可以将光信号分成多个光路，以实现光信号的分发和共享。</p>
</li>
</ol>
<p>综上所述，PON由OLT、ODN、ONT、光纤、光纤连接器和光纤分纤器等组件组成，通过这些组件实现光信号的传输、分发和接入。</p>
<img src="/images/PON.jpg" class="" width="850" title="PON结构图">

<h1 id="OLT"><a href="#OLT" class="headerlink" title="OLT"></a>OLT</h1><p>OLT（Optical Line Terminal）是光纤通信系统中的一种设备，用于光纤接入网的传输和交换。</p>
<p>OLT通常安装在光纤接入网的核心节点，作为光纤通信系统的主干设备。它连接光纤馈线和用户接入设备，负责将光信号转换为电信号，并将数据传输到用户终端。</p>
<p>OLT的主要功能包括：</p>
<ol>
<li><p>光信号转换：OLT接收来自光纤馈线的光信号，并将其转换为电信号进行处理和传输。</p>
</li>
<li><p>数据交换：OLT具有交换功能，可以根据用户的需求和网络拓扑结构，将数据从一个接口转发到另一个接口。</p>
</li>
<li><p>用户管理：OLT可以管理和控制连接到光纤接入网的用户设备，包括分配IP地址、认证用户身份、配置网络参数等。</p>
</li>
<li><p>安全管理：OLT可以实施安全策略，保护光纤接入网的数据安全和网络安全。</p>
</li>
<li><p>故障检测和排除：OLT可以监测光纤接入网的状态和性能，及时发现故障并进行排除。</p>
</li>
</ol>
<p>OLT通常具有高容量和高速率的特点，可以支持大量用户的接入需求，并提供高速、稳定的光纤接入服务。在光纤通信系统中，OLT与用户设备之间的连接通常使用以太网协议，如EPON（Ethernet Passive Optical Network）或GPON（Gigabit Passive Optical Network）。</p>
<p>总之，OLT是光纤通信系统中的关键设备，起到光纤接入网的传输、交换和管理的作用，是实现高速、稳定光纤接入服务的重要组成部分。</p>
<h1 id="ODN"><a href="#ODN" class="headerlink" title="ODN"></a>ODN</h1><p>ODN是光分布网络（Optical Distribution Network）的缩写，也称为光纤分布网络。它是光纤通信系统中的一部分，用于将光信号从光线路终端（OLT）传输到终端用户的光网络单元（ONU）。</p>
<p><u>ODN主要由光纤、光分纤盒、光分纤线和光分纤配线架等组成</u>。光纤是传输光信号的介质，光分纤盒是用于连接和保护光纤的装置，光分纤线是连接光纤盒和ONU的线缆，光分纤配线架是用于管理和组织光纤的架构。</p>
<p>在光纤接入网络中，ODN起到了将光信号从光线路终端传输到终端用户的作用。光信号从光线路终端经过光纤传输到光分纤盒，然后通过光分纤线连接到终端用户的ONU。ODN提供了高效、可靠的光信号传输和分发，使得终端用户可以享受到高速宽带接入和传输服务。</p>
<p>ODN的设计和布局需要考虑光纤的传输损耗、光分纤盒的连接和保护、光分纤线的布线和连接、光分纤配线架的管理和组织等因素。合理的ODN设计可以提高光信号的传输质量和可靠性，确保光纤接入网络的正常运行和服务质量。</p>
<h1 id="ONT"><a href="#ONT" class="headerlink" title="ONT"></a>ONT</h1><p>ONT（Optical Network Terminal）是光纤通信系统中的一种设备，也称为光网终端或光纤猫（Optical Network Terminal）。它是光纤接入网中用户侧的终端设备。</p>
<p>ONT通常安装在用户家庭或办公室，用于接收来自光纤接入网的光信号，并提供网络连接和服务给用户设备。</p>
<p>ONT的主要功能包括：</p>
<ol>
<li><p>光信号接收：ONT接收来自光纤接入网的光信号，并将其转换为电信号进行处理和传输。</p>
</li>
<li><p>数据转发：ONT可以将数据从光纤接入网转发到用户设备，实现网络连接和通信。</p>
</li>
<li><p>用户接口：ONT提供用户接口，用于连接用户设备，如计算机、电话、路由器等，使其能够接入光纤接入网并使用网络服务。</p>
</li>
<li><p>安全管理：ONT可以实施安全策略，保护用户设备和网络安全。</p>
</li>
<li><p>故障检测和排除：ONT可以监测用户设备和光纤接入网的状态和性能，及时发现故障并进行排除。</p>
</li>
</ol>
<p>ONT通常具有小型、低功耗的特点，适合安装在用户终端，提供光纤接入服务。在光纤通信系统中，ONT与OLT之间的连接通常使用以太网协议，如EPON（Ethernet Passive Optical Network）或GPON（Gigabit Passive Optical Network）。</p>
<p>总之，ONT是光纤通信系统中的用户侧设备，用于接收和处理来自光纤接入网的光信号，并提供网络连接和服务给用户设备。它是实现高速、稳定光纤接入服务的重要组成部分。</p>
<h1 id="分光器"><a href="#分光器" class="headerlink" title="分光器"></a>分光器</h1><p>分光器（Splitter）是一种光学设备，用于将光信号分为多个信号，使其可以同时传输到多个目标设备。分光器通常用于光纤通信系统中，特别是在光纤分布式系统（如光纤到户，FTTH）中。</p>
<p>分光器的主要功能是将一路光信号分为多个光信号，使每个信号的功率相等。常见的分光器类型包括平均功率分光器（1×N Splitter）和比例功率分光器（2×N Splitter）。</p>
<p>平均功率分光器将输入的光信号平均分配到多个输出端口上，每个输出端口的功率相等。比例功率分光器可以按照预定的比例分配光信号的功率，例如，将80%的功率分配到一个输出端口，将20%的功率分配到另一个输出端口。</p>
<p>分光器通常使用光纤芯片或光波导技术来实现光信号的分配。它们具有低插入损耗、高分光比、均匀的功率分配和良好的稳定性等特点。</p>
<p>在光纤通信系统中，分光器起到了重要的作用，可以将一路光信号分配给多个用户或设备，实现光纤网络的共享和扩展。</p>
<h1 id="光猫"><a href="#光猫" class="headerlink" title="光猫"></a>光猫</h1><p>光猫（Optical Modem）是一种将光纤信号转换为电信号，并提供网络连接和服务给用户设备的设备。它通常用于光纤接入网络（如光纤到户，FTTH）中，作为用户终端设备，是一种常见ONT。</p>
<p>光猫主要有以下几个功能：</p>
<ol>
<li><p>光信号转换：光猫接收光纤传输的光信号，并将其转换为电信号，以便用户设备可以理解和使用。</p>
</li>
<li><p>网络连接：光猫提供网络连接接口，通常是以太网接口（如RJ45接口），用于将用户设备（如计算机、路由器）连接到光纤网络。</p>
</li>
<li><p>网络服务：光猫通常具有路由器功能，可以提供网络地址转换（NAT）、防火墙、无线局域网（WLAN）等网络服务，以便用户设备可以访问互联网和其他网络资源。</p>
</li>
<li><p>电话服务（可选）：一些光猫还具备电话接口，用于连接传统电话设备，以提供电话服务。</p>
</li>
</ol>
<p>总的来说，光猫是一种将光纤信号转换为电信号，并提供网络连接和服务给用户设备的设备。它在光纤接入网络中起到重要的作用，使用户可以享受高速的光纤网络连接和各种网络服务。</p>
]]></content>
      <tags>
        <tag>网络-Ensp</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工程师职业规划参考</title>
    <url>/2023/07/02/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<h3 id="1-初级前端工程师（1-2年）："><a href="#1-初级前端工程师（1-2年）：" class="headerlink" title="1. 初级前端工程师（1-2年）："></a>1. 初级前端工程师（1-2年）：</h3><ul>
<li>学习HTML、CSS和JavaScript等基础知识，并熟练运用它们进行网页开发。</li>
<li>参与项目团队，积累实际项目经验。</li>
<li>学习和掌握常用的前端框架和工具，如React、Vue.js、Webpack等。</li>
<li>参与培训课程和技术社区，不断学习和提升技能。</li>
</ul>
<h3 id="2-中级前端工程师（3-5年）："><a href="#2-中级前端工程师（3-5年）：" class="headerlink" title="2. 中级前端工程师（3-5年）："></a>2. 中级前端工程师（3-5年）：</h3><ul>
<li>在项目中承担更复杂的前端开发任务，如开发响应式网站、移动端应用等。</li>
<li>深入学习和掌握前端框架和库的原理和使用技巧。</li>
<li>学习和应用前端最佳实践，如性能优化、代码规范等。</li>
<li>参与团队协作和项目管理，提升沟通和领导能力。</li>
</ul>
<h3 id="3-高级前端工程师（5年以上）："><a href="#3-高级前端工程师（5年以上）：" class="headerlink" title="3. 高级前端工程师（5年以上）："></a>3. 高级前端工程师（5年以上）：</h3><ul>
<li>在复杂项目中担任技术负责人或架构师角色，负责前端架构设计和技术选型。</li>
<li>深入研究前端领域的新技术和趋势，并引领团队进行技术创新和实践。</li>
<li>参与开源项目和技术社区，分享经验和贡献代码。</li>
<li>建立自己的技术品牌和影响力，如通过博客、演讲等方式分享经验和见解。</li>
</ul>
<h3 id="4-职业发展方向："><a href="#4-职业发展方向：" class="headerlink" title="4. 职业发展方向："></a>4. 职业发展方向：</h3><ul>
<li>前端架构师：专注于前端架构设计和技术选型，负责复杂项目的技术规划和架构设计。</li>
<li>前端团队管理：发展管理和领导能力，负责前端团队的招聘、培训和项目管理。</li>
<li>UX&#x2F;UI设计师：学习和掌握用户体验和界面设计的知识，负责前端界面设计和交互优化。</li>
<li>技术顾问：通过积累丰富的经验和知识，为企业提供前端技术咨询和解决方案。</li>
</ul>
<p>这只是一个参考，可以根据自己的兴趣和职业目标进行调整和补充。重要的是制定一个明确的职业规划，并不断学习和发展自己的技能，以实现职业的持续成长和发展。</p>
]]></content>
      <tags>
        <tag>职业规划</tag>
      </tags>
  </entry>
  <entry>
    <title>网络工程师职业规划参考</title>
    <url>/2023/07/02/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<h3 id="1-初级网络工程师（1-2年）："><a href="#1-初级网络工程师（1-2年）：" class="headerlink" title="1. 初级网络工程师（1-2年）："></a>1. 初级网络工程师（1-2年）：</h3><ul>
<li>学习和掌握计算机网络的基础知识，如TCP&#x2F;IP协议、网络拓扑等。</li>
<li>熟悉常用的网络设备和工具，如交换机、路由器、网络监控软件等。</li>
<li>参与网络设备的配置和维护工作，解决常见的网络故障和问题。</li>
<li>学习和掌握网络安全的基础知识，如防火墙、VPN等。</li>
</ul>
<h3 id="2-中级网络工程师（3-5年）："><a href="#2-中级网络工程师（3-5年）：" class="headerlink" title="2. 中级网络工程师（3-5年）："></a>2. 中级网络工程师（3-5年）：</h3><ul>
<li>参与大型网络项目的规划和实施，如企业网络升级、数据中心建设等。</li>
<li>深入学习和掌握网络技术的高级知识，如VLAN、路由协议、负载均衡等。</li>
<li>学习和应用网络性能优化的技术和方法，提高网络的稳定性和响应速度。</li>
<li>参与网络安全方面的工作，如网络漏洞扫描、入侵检测等。</li>
</ul>
<h3 id="3-高级网络工程师（5年以上）："><a href="#3-高级网络工程师（5年以上）：" class="headerlink" title="3. 高级网络工程师（5年以上）："></a>3. 高级网络工程师（5年以上）：</h3><ul>
<li>在复杂网络环境下担任技术负责人或架构师角色，负责网络架构设计和规划。</li>
<li>深入研究网络领域的新技术和趋势，并引领团队进行技术创新和实践。</li>
<li>参与网络安全的高级工作，如安全策略制定、事件响应等。</li>
<li>建立自己的技术品牌和影响力，如通过博客、演讲等方式分享经验和见解。</li>
</ul>
<h3 id="4-职业发展方向："><a href="#4-职业发展方向：" class="headerlink" title="4. 职业发展方向："></a>4. 职业发展方向：</h3><ul>
<li>网络架构师：专注于网络架构设计和规划，负责复杂网络项目的技术规划和架构设计。</li>
<li>网络安全专家：深入研究网络安全领域，负责企业的网络安全策略和漏洞修复。</li>
<li>云计算工程师：学习和掌握云计算和虚拟化技术，负责企业的云平台建设和管理。</li>
<li>网络运维经理：发展管理和领导能力，负责网络团队的招聘、培训和运维管理。</li>
</ul>
<p>这只是一个参考，可以根据自己的兴趣和职业目标进行调整和补充。重要的是制定一个明确的职业规划，并不断学习和发展自己的技能，以实现职业的持续成长和发展。</p>
]]></content>
      <tags>
        <tag>职业规划</tag>
      </tags>
  </entry>
  <entry>
    <title>后端工程师职业规划参考</title>
    <url>/2023/07/02/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<h3 id="1-初级后端工程师（1-3年）："><a href="#1-初级后端工程师（1-3年）：" class="headerlink" title="1. 初级后端工程师（1-3年）："></a>1. 初级后端工程师（1-3年）：</h3><ul>
<li>掌握一门主流后端开发语言，如Java、Python或Node.js。</li>
<li>学习并应用常见的后端开发框架和技术，如Spring、Django或Express.js。</li>
<li>参与项目开发，负责后端功能的实现和数据库设计。</li>
<li>学习和应用基本的软件工程原则和最佳实践。</li>
<li>持续学习和提升编程和问题解决能力。</li>
</ul>
<h3 id="2-中级后端工程师（3-5年）："><a href="#2-中级后端工程师（3-5年）：" class="headerlink" title="2. 中级后端工程师（3-5年）："></a>2. 中级后端工程师（3-5年）：</h3><ul>
<li>深入研究和应用后端开发技术栈，如数据库优化、性能调优、缓存等。</li>
<li>参与设计和开发复杂的后端系统，包括分布式系统和微服务架构。</li>
<li>学习和应用设计模式和架构原则，提高系统的可扩展性和可维护性。</li>
<li>参与团队的技术选型和架构设计，负责解决技术难题和挑战。</li>
<li>培养团队合作和沟通能力，开始指导和培养初级工程师。</li>
</ul>
<h3 id="3-高级后端工程师（5年以上）："><a href="#3-高级后端工程师（5年以上）：" class="headerlink" title="3. 高级后端工程师（5年以上）："></a>3. 高级后端工程师（5年以上）：</h3><ul>
<li>深入研究和应用领域专有的后端技术，如金融领域的支付系统、电子商务领域的订单处理系统等。</li>
<li>参与大型项目的架构设计和技术规划，负责解决复杂的技术挑战。</li>
<li>深入理解和应用云计算和容器化技术，如Docker和Kubernetes。</li>
<li>参与行业内的研究和交流，提升自己在该领域的专业影响力。</li>
<li>培养和指导团队成员的技术能力和职业发展。</li>
</ul>
<h3 id="4-技术管理者："><a href="#4-技术管理者：" class="headerlink" title="4. 技术管理者："></a>4. 技术管理者：</h3><ul>
<li>学习项目管理和团队管理知识，培养领导力和沟通能力。</li>
<li>担任技术团队的领导角色，负责项目的规划和执行。</li>
<li>帮助团队成员制定个人的职业规划，并提供指导和支持。</li>
<li>参与公司的技术战略规划和决策，推动团队的技术创新和发展。</li>
</ul>
]]></content>
      <tags>
        <tag>职业规划</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试工程师职业规划参考</title>
    <url>/2023/07/02/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h3 id="1-初级软件测试工程师（1-2年）："><a href="#1-初级软件测试工程师（1-2年）：" class="headerlink" title="1. 初级软件测试工程师（1-2年）："></a>1. 初级软件测试工程师（1-2年）：</h3><ul>
<li>学习和掌握软件测试的基础知识，如测试方法、测试文档编写等。</li>
<li>熟悉常用的测试工具和技术，如自动化测试工具、性能测试工具等。</li>
<li>参与软件测试项目，执行测试计划、编写测试用例、执行测试并记录缺陷。</li>
</ul>
<h3 id="2-中级软件测试工程师（3-5年）："><a href="#2-中级软件测试工程师（3-5年）：" class="headerlink" title="2. 中级软件测试工程师（3-5年）："></a>2. 中级软件测试工程师（3-5年）：</h3><ul>
<li>深入学习和掌握软件测试的高级知识，如测试策略、测试环境配置等。</li>
<li>参与复杂软件项目的测试规划和设计，提出测试方案和策略。</li>
<li>掌握自动化测试技术，编写和执行自动化测试脚本，提高测试效率和质量。</li>
<li>学习和应用性能测试和安全测试的技术，提高软件的性能和安全性。</li>
</ul>
<h3 id="3-高级软件测试工程师（5年以上）："><a href="#3-高级软件测试工程师（5年以上）：" class="headerlink" title="3. 高级软件测试工程师（5年以上）："></a>3. 高级软件测试工程师（5年以上）：</h3><ul>
<li>在复杂项目中担任测试团队的技术负责人或测试架构师角色。</li>
<li>深入研究软件测试领域的新技术和趋势，并引领团队进行技术创新和实践。</li>
<li>参与软件质量管理方面的工作，如质量度量、过程改进等。</li>
<li>建立自己的技术品牌和影响力，如通过博客、演讲等方式分享经验和见解。</li>
</ul>
<h3 id="4-职业发展方向："><a href="#4-职业发展方向：" class="headerlink" title="4. 职业发展方向："></a>4. 职业发展方向：</h3><ul>
<li>质量保证经理：发展管理和领导能力，负责整个软件质量保证流程的管理和改进。</li>
<li>自动化测试专家：深入研究自动化测试技术和工具，负责团队的自动化测试实施。</li>
<li>安全测试专家：学习和掌握安全测试的知识和技术，负责软件安全测试和漏洞修复。</li>
<li>敏捷测试专家：学习和掌握敏捷开发和测试方法，负责敏捷团队的测试工作。</li>
</ul>
]]></content>
      <tags>
        <tag>职业规划</tag>
      </tags>
  </entry>
</search>
